// Generated by CoffeeScript 1.10.0
(function() {
  var Gemini, crypto, qs, request;

  process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

  request = require('request');

  crypto = require('crypto');

  qs = require('querystring');

  module.exports = Gemini = (function() {
    function Gemini(key, secret, nonceGenerator) {
      this.url = 'https://api.sandbox.gemini.com'
      this.version = 'v1';
      this.key = key;
      this.secret = secret;
      this.nonce = new Date().getTime();
      this._nonce = typeof nonceGenerator === "function" ? nonceGenerator : function() {
        return ++this.nonce;
      };
    }

    Gemini.prototype.make_request = function(sub_path, params, cb) {
      var headers, key, nonce, path, payload, signature, url, value;
      if (!this.key || !this.secret) {
        return cb(new Error("missing api key or secret"));
      }
      path = '/' + this.version + '/' + sub_path;
      url = this.url + path;
      nonce = JSON.stringify(this._nonce());
      payload = {
        request: path,
        nonce: nonce
      };
      for (key in params) {
        value = params[key];
        payload[key] = value;
      }
      payload = new Buffer(JSON.stringify(payload)).toString('base64');
      signature = crypto.createHmac("sha384", this.secret).update(payload).digest('hex');
      headers = {
        'X-GEMINI-APIKEY': this.key,
        'X-GEMINI-PAYLOAD': payload,
        'X-GEMINI-SIGNATURE': signature
      };
      return request({
        url: url,
        method: "POST",
        headers: headers,
        timeout: 15000
      }, function(err, response, body) {
        var error, error1, result;
        if (err || (response.statusCode !== 200 && response.statusCode !== 400)) {
          return cb(new Error(err != null ? err : response.statusCode));
        }
        try {
          result = JSON.parse(body);
        } catch (error1) {
          error = error1;
          return cb(null, {
            messsage: body.toString()
          });
        }
        if (result.message != null) {
          return cb(new Error(result.message));
        }
        return cb(null, result);
      });
    };

    Gemini.prototype.make_public_request = function(path, cb) {
      var url;
      url = this.url + '/v1/' + path;
      return request({
        url: url,
        method: "GET",
        timeout: 15000
      }, function(err, response, body) {
        var error, error1, result;
        if (err || (response.statusCode !== 200 && response.statusCode !== 400)) {
          return cb(new Error(err != null ? err : response.statusCode));
        }
        try {
          result = JSON.parse(body);
        } catch (error1) {
          error = error1;
          return cb(null, {
            messsage: body.toString()
          });
        }
        if (result.message != null) {
          return cb(new Error(result.message));
        }
        return cb(null, result);
      });
    };

    Gemini.prototype.cancel_order = function(order_id, cb) {
      var params = {
        order_id : order_id
      }
      return this.make_request('order/cancel', params, cb);
    };

    Gemini.prototype.get_active_order = function(cb) {
      return this.make_request('orders', {}, cb);
    };

    Gemini.prototype.set_order = function(symbol, amount, price, side, type, cb) {
      var params;
      params = {
        symbol: symbol,
        amount: amount,
        price: price,
        side: side,
        type: type
      };
      return this.make_request('order/new', params, cb);
    };

    Gemini.prototype.order_status = function(order_id, cb) {
      var params = {
        order_id : order_id
      }
      return this.make_request('order/status', params, cb);
    };

    return Gemini;

  })();

}).call(this);
